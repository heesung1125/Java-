/* 2016-11-21
Java Appication의 메모리 구조 & 객체 생성 과정

↓ test.class ↓

public class test{
	int age;			← 맴버 변수 = 필드 이며, 인스턴스 변수
	String name ;		← 맴버 변수 = 필드 이며, 인스턴스 변수
	static int salary;	← 맴버 변수 = 필드 이며, 클래스 변수 (static 가 붙으면...)
 public static test(){ ← 생성자
  [초기화 코드]
 }
 
 public void setAge(int age){ setter 설정
 	this.age = age();
 }
 public int getAge(){ getter 설정
 	return this.age;
 }
 
 public void method1(){
 	System.out.println("test")
 }
}

↓ start.class ↓ ← 처음 실행되는 class

public class start{
	public static void main(String[] args) {					    ____객체생성____
		test t1 = new test(); ← 객체 생성 (클래스명_객체로가기위한주소변수 = new_생성자명();)
		t1.method1(); ← 해당 객체에 있는 메소드 불러오기
		t1.age = 2; ← test 클래스의 age 변수에 2값을 저장
		t1.setAge(2); ← 위와 같은 의미 단, setAge 메소드가 해당 클레스내에 설정 해 주어야 한다.(상단 test.class 참조) 이게 setter
		System.out.pnistln(t1.age); ← test 클래스의 age 변수의 값을 출력
		System.out.pnistln(t1.getAge); ← 위와 같은 의미 단, getAge 메소드가 해당 클레스내에 설정 해 주어야 한다.(상단 test.class 참조) 이게 getter
	}
}



기본 자료형(Primitive Data Type)
int, char, short, long, double, float

참조 자료형(Reference Data Type) Data를 대량으로 다룰 때
 Array Type(배열)
 	String
 	StringBuilder
 
 Enumeration(열거)

----------------------------------------------------------------
Multi Thread
 * 한개의 Application에서 여러개의 Thread를 작동

Stack : Data관리방식 // 입력 순서대로 자리 잡고 처리는 역순으로 처리한다.(FILO)First In Last Out 
  ↕
(First In First Out) // 입력 순서대로 자리 잡고 처리도 정순으로 처리 한다.


 * 참조(Reference) 자료형 : 실제 값이 들어있지 않고 값을 찾아 갈 수 있는 주소값을 적어주는 자료형.

	// 객체(object) ≒  인스턴스(Instance)
		└객체 가 좀 더 넓은 범위 인스턴스는 그 안에 포함 쯤??
 * getter / setter
	getter = get + er : 인스턴스 변수의 값 얻어오기
	setter = set + er : 인스턴스에 값 설정하기
	
 * static 키워드

------------------------------------------------------------------

 * public / private / protected / default (접근제한자)
 	! protected / default 어떤 접근제한자인지 확인

 * Class 변수 : static가 붙어있는 맴버변수
 * Instance 변수 : static이 붙어있지 않은 맴버변수
 * final
 	fianl double pi = 3.14 = 상수
	 └ final 을 붙이면 입력 값이 고정 된다.

	public : 패키지 외부에서도 사용 가능
	protected : 패키지 외부에서도 사용 불가
	default : 패키지 외부에서도 사용 불가
	private : private를 설정하면 외부에서 사용하지 못 한다.(해당 클래스 안에서만 사용 가능)

 * 상속(Inheritance)
 	상위 클래스 ⊙ super class
 		└하위 클래스 ⊙ sub class
 	



 */